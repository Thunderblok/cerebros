<!DOCTYPE html>
    <!-- Published 7d93eff4-f005-490a-90d0-fa71472f4c8f created by Magic Patterns: https://www.magicpatterns.com/ -->
    <html lang="en" dir="ltr" style="overflow:auto;" class="light">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <title>Custom AI Assistants in Hours, Not Months</title>
        <meta property="og:title" content="Custom AI Assistants in Hours, Not Months" />
        
        
        <meta property="og:type" content="website" />
        
        <meta property="og:image" content="https://mirrorful-production.s3.us-west-1.amazonaws.com/patterns/files/cc252908-5c57-4eeb-8d3a-65ab5a49c1a1/CleanShot_2025-03-11_at_11.09.592x.png" />
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="630" />
        <meta property="og:image:secure_url" content="https://mirrorful-production.s3.us-west-1.amazonaws.com/patterns/files/cc252908-5c57-4eeb-8d3a-65ab5a49c1a1/CleanShot_2025-03-11_at_11.09.592x.png" />
        <meta property="og:image:type" content="image/png" />
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:image" content="https://mirrorful-production.s3.us-west-1.amazonaws.com/patterns/files/cc252908-5c57-4eeb-8d3a-65ab5a49c1a1/CleanShot_2025-03-11_at_11.09.592x.png" />
        <meta name="twitter:image:src" content="https://mirrorful-production.s3.us-west-1.amazonaws.com/patterns/files/cc252908-5c57-4eeb-8d3a-65ab5a49c1a1/CleanShot_2025-03-11_at_11.09.592x.png" />
        <link rel="image_src" href="https://mirrorful-production.s3.us-west-1.amazonaws.com/patterns/files/cc252908-5c57-4eeb-8d3a-65ab5a49c1a1/CleanShot_2025-03-11_at_11.09.592x.png" />
        
        
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
      </head>
      <body style="margin:0;font-family:"'Inter','Inter',sans-serif;">
        
        
        <div id="root"  />
        
        
        
        
        
        <script src="https://mirrorful-production.s3.us-west-1.amazonaws.com/patterns/bundles/914703ef-bd0d-4db4-b042-7a2f725bac78/be3a21e9-5d61-42ff-b7f4-3c32b861c5dc/index-914703ef-bd0d-4db4-b042-7a2f725bac78.js" type="module" crossorigin="anonymous" async></script>
        <script>
(function() {
  // Track the last known path to avoid duplicate messages
  let lastPath = window.location.pathname;

  // Helper function to notify parent of route changes
  function notifyRouteChange(path) {
    if (path !== lastPath) {
      lastPath = path;
      window.parent.postMessage({
        id: 'c3d63bfe-7b60-470f-b476-8894275687ba',
        type: 'ROUTE_CHANGED',
        path: path
      }, '*');
    }
  }

  // Override pushState
  const originalPushState = history.pushState;
  history.pushState = function() {
    originalPushState.apply(history, arguments);
    notifyRouteChange(window.location.pathname);
  };

  // Override replaceState
  const originalReplaceState = history.replaceState;
  history.replaceState = function() {
    originalReplaceState.apply(history, arguments);
    notifyRouteChange(window.location.pathname);
  };

  // Listen for popstate (browser back/forward)
  window.addEventListener('popstate', function() {
    notifyRouteChange(window.location.pathname);
  });

  // Listen for hash changes
  window.addEventListener('hashchange', function() {
    notifyRouteChange(window.location.pathname + window.location.hash);
  });

  // Also monitor clicks for client-side routing that might not use History API
  // This is a fallback for edge cases
  let checkInterval;
  document.addEventListener('click', function(e) {
    // Clear any existing interval
    if (checkInterval) clearInterval(checkInterval);

    // Check for route changes over the next 100ms
    let checks = 0;
    checkInterval = setInterval(function() {
      checks++;
      const currentPath = window.location.pathname;
      if (currentPath !== lastPath) {
        notifyRouteChange(currentPath);
        clearInterval(checkInterval);
      }
      // Stop checking after 10 attempts (100ms total)
      if (checks >= 10) {
        clearInterval(checkInterval);
      }
    }, 10);
  });

  // Notify parent of initial path on load
  window.addEventListener('load', function() {
    window.parent.postMessage({
      id: 'c3d63bfe-7b60-470f-b476-8894275687ba',
      type: 'ROUTE_CHANGED',
      path: window.location.pathname
    }, '*');
  });
})();
</script>
        
        
        
        
      </body>
    </html>